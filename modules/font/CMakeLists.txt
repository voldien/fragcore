#
FIND_PACKAGE(Freetype QUIET)
IF(FREETYPE_FOUND)
	MESSAGE(STATUS "Using freetype version ${FREETYPE_VERSION_STRING}.")
ELSE()
	# Attempt to find it manually.
ENDIF()

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" )
INCLUDE(freetype)


FILE(GLOB FONT_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
FILE(GLOB FONT_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

# Library target.
ADD_LIBRARY(fragcore-font SHARED ${FONT_SOURCE_FILES} ${FONT_HEADER_FILES})
TARGET_LINK_LIBRARIES(fragcore-font PUBLIC fragcore ${FREETYPE_LIBRARIES}  )
TARGET_COMPILE_DEFINITIONS(fragcore-font PRIVATE FRAG_CORE_INTERNAL_IMP=1)

#
TARGET_INCLUDE_DIRECTORIES(fragcore-font PRIVATE  ${FREETYPE_INCLUDE_DIRS}
											PUBLIC
											$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
											$<INSTALL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)

ADD_DEPENDENCIES(fragcore-font fragcore )

IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8) # -fPIC is only required
	SET_PROPERTY(TARGET fragcore-font PROPERTY POSITION_INDEPENDENT_CODE ON)
ENDIF()

#
IF(BUILD_WITH_INSTALL)
    INSTALL(TARGETS fragcore-font DESTINATION lib COMPONENT ${LIBFRAGCORE_COMPONENT})
ENDIF()

IF(CMAKE_TESTING_ENABLED)
	ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
ENDIF()

