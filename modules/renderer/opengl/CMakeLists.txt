SET(OpenGL_GL_PREFERENCE "GLVND")
SET(GLEW_USE_STATIC_LIBS False)

##
FIND_PACKAGE(OpenGL QUIET)
FIND_PACKAGE(GLEW QUIET)
FIND_PACKAGE(OpenGLES QUIET)


IF(GLEW_FOUND)
    MESSAGE(STATUS "Glew found: ${GLEW_LIBRARIES}.")
ELSE()
    SET(GLEW_INCLUDE_DIR  "")
ENDIF()

IF(OPENGL_FOUND)
    MESSAGE(STATUS "OpenGL found: ${OPENGL_LIBRARIES}.")
ELSE()
    SET(OPENGL_INCLUDE_DIR  "")
ENDIF()

IF(OpenGLES_FOUND)
    MESSAGE(STATUS "OpenGLES found: ${OPENGLES_EGL_LIBRARY}.")
ELSE()
    SET(OPENGLES_EGL_INCLUDE_DIR  "")
ENDIF()

# Source files.
FILE(GLOB OPENGL_RENDERINTERFACE_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
FILE(GLOB OPENGL_RENDERINTERFACE_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)


#
ADD_LIBRARY(fragcore-rgl-obj OBJECT ${OPENGL_RENDERINTERFACE_SOURCE_FILES} ${OPENGL_RENDERINTERFACE_HEADER_FILES} )
TARGET_LINK_LIBRARIES(fragcore-rgl-obj PUBLIC fragcore fragcore-window-sdl OpenGL::OpenGL OpenGL::GLU OpenGL::EGL ${GLEW_LIBRARIES} )
TARGET_COMPILE_DEFINITIONS(fragcore-rgl-obj PRIVATE FRAG_CORE_INTERNAL_IMP=1)


# OpenGL dependies headers.
TARGET_INCLUDE_DIRECTORIES(fragcore-rgl-obj PRIVATE ${GLEW_INCLUDE_DIRS} PUBLIC
											$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
											$<INSTALL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
ADD_DEPENDENCIES(fragcore-rgl-obj fragcore)


ADD_LIBRARY(fragcore-rgl $<TARGET_OBJECTS:fragcore-rgl-obj>)
TARGET_LINK_LIBRARIES(fragcore-rgl PUBLIC fragcore-rgl-obj )
ADD_DEPENDENCIES(fragcore-rgl fragcore-rgl-obj)

ADD_LIBRARY(fragcore-module-render-opengl MODULE $<TARGET_OBJECTS:fragcore-rgl-obj>  )
TARGET_LINK_LIBRARIES(fragcore-module-render-opengl INTERFACE fragcore-rgl )


IF(BUILD_WITH_INSTALL)
    INSTALL(TARGETS fragcore-module-render-opengl DESTINATION lib COMPONENT ${LIBFRAGCORE_COMPONENT})
    INSTALL(TARGETS fragcore-rgl DESTINATION lib COMPONENT ${LIBFRAGCORE_COMPONENT})
ENDIF()

IF(CMAKE_TESTING_ENABLED)
	ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
ENDIF()
