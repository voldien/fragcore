apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

dependencies {
	implementation libraries.supportCoreUtils
	implementation libraries.kotlinStdLib
	implementation libraries.v4Support
}


def pathToRootDir = "../../../.."

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')

android {
	compileSdkVersion versions.compileSdk
	buildToolsVersion versions.buildTools

	defaultConfig {
		minSdkVersion versions.minSdk
		targetSdkVersion versions.targetSdk

		externalNativeBuild {
			cmake {
				abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
				// Passes optional arguments to CMake.
				arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

				// Sets a flag to enable format macro constants for the C compiler.
				cFlags "-D__STDC_FORMAT_MACROS", "-fexceptions", "-frtti"

			}
		}
		ndk {
			// Specifies the ABI configurations of your native
			// libraries Gradle should build and package with your APK.
			abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
		}

	}

	lintOptions {
		abortOnError false
		disable 'MissingTranslation', 'UnusedResources'
	}

	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			res.srcDirs = ['res']
			aidl.srcDirs = ['aidl']
			assets.srcDirs = ['assets']
		}
		debug.jniLibs.srcDirs = ['libs/debug']
		release.jniLibs.srcDirs = ['libs/release']
	}

	libraryVariants.all { variant ->
		variant.outputs.all { output ->
			output.outputFileName = "frag-lib.${variant.name}.aar"
		}

		def buildType = variant.buildType.name.capitalize()

		def taskPrefix = ""
		if (project.path != ":") taskPrefix = project.path + ":"

		// Disable the externalNativeBuild* task as it would cause build failures since the cmake build
		// files is only setup for editing support.
		gradle.startParameter.excludedTaskNames += taskPrefix + "externalNativeBuild" + buildType

		def releaseTarget = buildType.toLowerCase()
		if (releaseTarget == null || releaseTarget == "") {
			throw new GradleException("Invalid build type: " + buildType)
		}

		if (!supportedAbis.contains(defaultAbi)) {
			throw new GradleException("Invalid default abi: " + defaultAbi)
		}

		// Creating gradle task to generate the native libraries for the default abi.
		def taskName = getSconsTaskName(buildType) + defaultAbi
		tasks.create(name: taskName, type: Exec) {
			executable "cmake"
			args "${pathToRootDir}", "-DCMAKE_SYSTEM_NAME=Android", "-DCMAKE_ANDROID_NDK=${ndkDir}", "-DCMAKE_SYSTEM_VERSION=${versions.compileSdk}", "-DCMAKE_BUILD_TYPE=${releaseTarget}",
					"-D__STDC_FORMAT_MACROS=0",  "-DCMAKE_ANDROID_ARCH_ABI=${defaultAbi}", "-DANDROID_TOOLCHAIN=clang"
		}

		// Schedule the tasks so the generated libs are present before the aar file is packaged.
		tasks["merge${buildType}JniLibFolders"].dependsOn taskName
	}

	externalNativeBuild {
		cmake {
			path "CMakeLists.txt"
			version "3.15.7"
		}
	}

}
